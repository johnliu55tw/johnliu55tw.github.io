<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>John Engineering Stuff</title><link href="https://johnliu55.tw/" rel="alternate"></link><link href="https://johnliu55.tw/feeds/all.atom.xml" rel="self"></link><id>https://johnliu55.tw/</id><updated>2019-05-19T00:00:00+08:00</updated><entry><title>用 Pelican 寫中文文章</title><link href="https://johnliu55.tw/when-pelican-meets-cjk.html" rel="alternate"></link><published>2019-05-19T00:00:00+08:00</published><updated>2019-05-19T00:00:00+08:00</updated><author><name>John Liu</name></author><id>tag:johnliu55.tw,2019-05-19:/when-pelican-meets-cjk.html</id><summary type="html">&lt;p&gt;想寫 Blog 很久了，一直覺得該找個地方記錄一下腦子裡的想法，不然我記性超級差，隔天就忘了自己到底在忙什麼。&lt;/p&gt;
&lt;p&gt;那要用什麼寫？&lt;/p&gt;
&lt;p&gt;一般的 Blog 服務當然是不考慮，對&lt;strong&gt;時常要放程式碼&lt;/strong&gt;的人來說完全不適合。&lt;/p&gt;
&lt;p&gt;在很潮的 Medium 上寫過一篇文章，沒有原生支援 Code Syntax Highlighting
讓人非常消火，每次都得用 GitHub Gist 放程式碼實在有點麻煩。而且用 Vim + Markup Language 寫文件寫習慣了，對必須用滑鼠改格式這件事覺得不太順手。&lt;/p&gt;
&lt;p&gt;Google 了一下，身為 Python 工程師及愛好者，用 &lt;a class="reference external" href="https://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt; 寫然後架在 GitHub Pages
上似乎是最好的選擇：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;用 Python 寫的，可以用 Python 擴充和修改功能&lt;/li&gt;
&lt;li&gt;支援 reStructuredText …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;想寫 Blog 很久了，一直覺得該找個地方記錄一下腦子裡的想法，不然我記性超級差，隔天就忘了自己到底在忙什麼。&lt;/p&gt;
&lt;p&gt;那要用什麼寫？&lt;/p&gt;
&lt;p&gt;一般的 Blog 服務當然是不考慮，對&lt;strong&gt;時常要放程式碼&lt;/strong&gt;的人來說完全不適合。&lt;/p&gt;
&lt;p&gt;在很潮的 Medium 上寫過一篇文章，沒有原生支援 Code Syntax Highlighting
讓人非常消火，每次都得用 GitHub Gist 放程式碼實在有點麻煩。而且用 Vim + Markup Language 寫文件寫習慣了，對必須用滑鼠改格式這件事覺得不太順手。&lt;/p&gt;
&lt;p&gt;Google 了一下，身為 Python 工程師及愛好者，用 &lt;a class="reference external" href="https://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt; 寫然後架在 GitHub Pages
上似乎是最好的選擇：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;用 Python 寫的，可以用 Python 擴充和修改功能&lt;/li&gt;
&lt;li&gt;支援 reStructuredText 及 Markdown&lt;/li&gt;
&lt;li&gt;支援 Disqus 和 Google Analytic 等其他好用的服務&lt;/li&gt;
&lt;li&gt;支援許多主題： &lt;a class="reference external" href="http://www.pelicanthemes.com/"&gt;Pelican Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;讚，那就開始寫吧！&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;當 Pelican 遇上中文&lt;/h2&gt;
&lt;p&gt;平常文件都是用英文在寫，當開始用 reStructuredText 寫起中文立刻覺得不太對勁…好像出現了很多不該出現的空格？&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt=" 詭異的空格們 " src="https://johnliu55.tw/when-pelican-meets-cjk/images/weird-spaces.png" /&gt;
&lt;p class="caption"&gt;詭異的空格們&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;換行變成了空格&lt;/h3&gt;
&lt;p&gt;我是龜毛人，原始碼的行數不超過 80 個字元是基本，最多也不能超過 100，所以很長的一個段落會用多行表示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;我是龜毛人，原始碼的行數不超過&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="err"&gt;個字元是基本，最多也不能超過&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;
&lt;span class="err"&gt;所以很長的一個段落會用多行表示：&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;reStructuredText 和 Markdown 都會保留這個換行字元到轉換後的 HTML 中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;我是龜毛人，原始碼的行數不超過&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="err"&gt;個字元是基本，最多也不能超過&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;
&lt;span class="err"&gt;所以很長的一個段落會用多行表示：&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而瀏覽器在遇到這樣的換行字元時會將他轉換為空格，因為
&lt;a class="reference external" href="https://www.w3.org/MarkUp/html-spec/html-spec_4.html#SEC4.2.2"&gt;Spec&lt;/a&gt;
就是這樣規定：&lt;/p&gt;
&lt;blockquote&gt;
An HTML user agent should treat end of line in any of its variations as
a word space in all contexts except preformatted text.&lt;/blockquote&gt;
&lt;p&gt;這件事在英文很合理，但到了中文就不合理了，&lt;strong&gt;因為我們不會用空格把文字隔開&lt;/strong&gt;。於是乎，上面的例子瀏覽器會顯示為：&lt;/p&gt;
&lt;blockquote&gt;
我是龜毛人，原始檔的行數不超過 80 個字元是基本，100 則是最大值， 所以很長的一個段落會用多行表示：&lt;/blockquote&gt;
&lt;p&gt;注意到「所以」前面多了一個空格。如果你習慣很好，只有在使用標點符號之後才會換行，那看起來影響不大。但如果換行是介於兩個中文字之間，那就會 像這樣在文字間出現詭異的空格。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inline-markup"&gt;
&lt;h3&gt;Inline Markup 的空格&lt;/h3&gt;
&lt;p&gt;不像 Markdown，reStructuredText 要求&lt;strong&gt;必須用空格&lt;/strong&gt;
（&lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#inline-markup-recognition-rules"&gt;或其他類似功能的字元&lt;/a&gt;）將 Inline Markup
與其他的文字區隔開來：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This is **inline markup** bold.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這樣的空格會被保留到 HTML：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;inline markup&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; bold.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跟上面提到的一樣，這空格在英文沒差，中文就不行了。不過江湖在走，Workaround 要有，最簡單的方法是自己用 &lt;tt class="docutils literal"&gt;\&lt;/tt&gt; 來「跳脫」這個空格：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This is\ **inline markup**\ bold.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但每次都要手動加入這反斜線實在有點麻煩。如果這空格能自己消失，那該有多好。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bonus"&gt;
&lt;h3&gt;Bonus：中英文間的空格&lt;/h3&gt;
&lt;blockquote&gt;
有研究顯示，打字的時候不喜歡在中文和英文之間加空格的人，感情路都走得很辛苦，有七成的比例會在 34 歲的時候跟自己不愛的人結婚，而其餘三成的人最後只能把遺產留給自己的貓。畢竟愛情跟書寫都需要適時地留白。
—— &lt;a class="reference external" href="https://github.com/vinta/pangu.js"&gt;vinta/pangu.js&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;…這種空格我個人是覺得還可以接受啦，不過如果 Pelican 能自動幫我加上這些空格，那我就不用擔心未來會跟不愛的人結婚了。寫程式真是份偉大的工作。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican-plugin"&gt;
&lt;h2&gt;寫個 Pelican Plugin 吧！&lt;/h2&gt;
&lt;p&gt;原本想說可以從處理 reStructuredText 的函式庫 &lt;a class="reference external" href="http://docutils.sourceforge.net/"&gt;docutils&lt;/a&gt; 下手，無奈功力不夠高深，看不出來到底該怎麼修改他的行為，只好從 Pelican 下手。&lt;/p&gt;
&lt;p&gt;之前提到 Pelican 能夠用 Python 自己擴充功能，而在官方的 &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;pelican-plugins&lt;/a&gt;
列表中搜尋了一下只有 &lt;a class="reference external" href="https://github.com/yuex/cjk-auto-spacing"&gt;cjk-auto-spacing&lt;/a&gt; 能夠自動調整中英文間的空格，但還是沒有解決所有的問題。Google 了一下找到這篇「&lt;a class="reference external" href="jekyll_cjk_newline"&gt;解决 jekyll 中文换行变成空格的问题&lt;/a&gt;」，但他是用
&lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; 而不是 Pelican。安捏…不如自己寫一個吧！&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;Pelican Plugin 的運作方式&lt;/h3&gt;
&lt;blockquote&gt;
Pelican 定義了各種「&lt;strong&gt;信號&lt;/strong&gt;」（Signal），代表了從原始碼到最後生出 HTML 的各個&lt;strong&gt;階段&lt;/strong&gt;。你可以將自己寫的 Python 函式&lt;strong&gt;註冊&lt;/strong&gt;到這些信號上，Pelican 就會在那些&lt;strong&gt;信號對應的階段發生時&lt;/strong&gt;呼叫你的函式，並將當下的狀態或處理的物件傳進這個函式，讓你的函式能夠調整 Pelican 的行為。細節和信號列表請參考 &lt;a class="reference external" href="https://docs.getpelican.com/en/stable/plugins.html"&gt;Pelican Plugin Document&lt;/a&gt; 。&lt;/blockquote&gt;
&lt;p&gt;前面提到了 &lt;a class="reference external" href="https://github.com/yuex/cjk-auto-spacing"&gt;cjk-auto-spacing&lt;/a&gt; ，理所當然拿他來參考一下。它處理的方式是使用信號
&lt;em&gt;content_object_init&lt;/em&gt; 來取得 &lt;tt class="docutils literal"&gt;content_object&lt;/tt&gt; 物件，而這個物件的 &lt;tt class="docutils literal"&gt;_content&lt;/tt&gt;
屬性存放了從 reStructuredText 及 Markdown 原始碼轉換而來的 &lt;strong&gt;HTML&lt;/strong&gt; ，以 &lt;tt class="docutils literal"&gt;str&lt;/tt&gt;
儲存。我們可以根據需求來調整這個 HTML，調整完後再 assign 回 &lt;tt class="docutils literal"&gt;_content&lt;/tt&gt; ，Pelican 就會用這份新的 HTML 繼續之後的工作。&lt;/p&gt;
&lt;p&gt;舉例來說，如果我們想把 HTML 裡的所有 &lt;tt class="docutils literal"&gt;&amp;lt;p&amp;gt;&lt;/tt&gt; Tag 換成 &lt;tt class="docutils literal"&gt;&amp;lt;foo&amp;gt;&lt;/tt&gt; ，可以很快的用
Regular Expression 來達成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;new_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;(/)?p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;\1foo&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_content&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_object_init&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pelican 規定每個 Plugin 都必須要有 &lt;tt class="docutils literal"&gt;register&lt;/tt&gt; 函式，目的在指定你需要哪些信號以及他們要觸發的函式。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican-cjk"&gt;
&lt;h2&gt;Pelican-CJK&lt;/h2&gt;
&lt;p&gt;花了些時間用 Regular Expression 刻了一個能夠自動處理以上問題的 Plugin：
&lt;a class="reference external" href="https://github.com/johnliu55tw/pelican-cjk"&gt;pelican-cjk&lt;/a&gt; 。它能夠自動根據你寫的內容調整 HTML，解決上述那些小毛病。&lt;/p&gt;
&lt;p&gt;在開發這個 Plugin 的時候考慮了以下幾點：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;必須支援 reStructuredText 及 Markdown&lt;/li&gt;
&lt;li&gt;不想依賴其他第三方模組&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要從原始碼（ &lt;tt class="docutils literal"&gt;.md&lt;/tt&gt; 與 &lt;tt class="docutils literal"&gt;.rst&lt;/tt&gt; ）或 Parser 下手，就還得考慮 reStructuredText 和 Markdown 的差異，所以如果兩個都得支援，直接從 HTML 下手會好處理很多。&lt;/p&gt;
&lt;p&gt;而基於第二點，
&lt;a class="reference external" href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;Beautiful Soup&lt;/a&gt;
等等能夠幫助處理 HTML 的模組也就不考慮了，而 Python 內建的
&lt;a class="reference external" href="https://docs.python.org/3/library/html.parser.html"&gt;HTML Parser&lt;/a&gt; 又太陽春，所以最後我直接用 Regex 來處理。但這不免有些小問題：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;無法判斷目前要調整的文字屬於那種區塊。reStructuredText 和 Markdown 都有所謂的「Literal Block」，在這個區塊內是不會處理任何標記的。
&lt;strong&gt;但因為程式無法根據 HTML 判斷區塊，它一樣會調整這個區塊內的文字。&lt;/strong&gt;
不過 Literal Block 通常是用來放範例程式碼的，比較不會出現中英混用的情況，所以就我認為影響不大。&lt;/li&gt;
&lt;li&gt;透過上述信號拿到的 HTML &lt;strong&gt;不包含文章的標題&lt;/strong&gt;，所以標題無法調整，得自己加入中英文間的空格。這應該可以透過其他信號取得，但我還沒研究。&lt;/li&gt;
&lt;li&gt;為了簡單起見，我寫的 Regex 不會針對以下情況調整空格：&lt;ul&gt;
&lt;li&gt;巢狀 Inline Markup：reStructuredText 不允許這種情況，也就是說 HTML 中不會出現
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;English&amp;lt;em&amp;gt;&amp;lt;strong&amp;gt;斜體又粗體&amp;lt;/strong&amp;gt;&amp;lt;/em&amp;gt;&lt;/span&gt;&lt;/tt&gt; 這樣的東西。但 Markdown 允許，所以這是有機會出現的。以這個例子來說，「English」與「斜體又粗體」間就不會自動加空格。&lt;/li&gt;
&lt;li&gt;連續 Inline Markup： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;em&amp;gt;English&amp;lt;/em&amp;gt;&amp;lt;strong&amp;gt;很強&amp;lt;/strong&amp;gt;&lt;/span&gt;&lt;/tt&gt;
連續的兩個 Inline Markup 也需要額外判斷，而且使用情況也不多，所以在此也不考慮。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望這個 Plugin 能夠幫助更多跟我一樣毛很多的人，如果大家有什麼更好的方法也歡迎一起討論。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/vinta/pangu.js"&gt;vinta/pangu.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="jekyll_cjk_newline"&gt;解决 jekyll 中文换行变成空格的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Pelican"></category></entry><entry><title>用 Python 控制其他行程的 TTY 終端裝置</title><link href="https://johnliu55.tw/use-python-to-control-other-process-tty.html" rel="alternate"></link><published>2018-04-11T00:00:00+08:00</published><updated>2018-04-11T00:00:00+08:00</updated><author><name>John Liu</name></author><id>tag:johnliu55.tw,2018-04-11:/use-python-to-control-other-process-tty.html</id><summary type="html">&lt;div class="section" id="foreword"&gt;
&lt;h2&gt;Foreword&lt;/h2&gt;
&lt;p&gt;這篇文章會稍微解釋 Unix 的 TTY 系統以及 Pseudo Terminal 的概念，接著討論如何使用 Python 的 &lt;tt class="docutils literal"&gt;pty&lt;/tt&gt; 模組中的 &lt;tt class="docutils literal"&gt;pty.fork()&lt;/tt&gt;
來建立並控制子行程的 TTY 系統，最後用 Python 來實作控制 &lt;em&gt;madplay&lt;/em&gt; 這個 CLI MP3 Player。&lt;/p&gt;
&lt;p&gt;有問題歡迎大家詢問，有任何錯誤也請大家幫忙指正 :D&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="python-mp3-player"&gt;
&lt;h2&gt;Python MP3 Player&lt;/h2&gt;
&lt;p&gt;這幾天在玩 &lt;a class="reference external" href="https://www.seeedstudio.com/ReSpeaker-Core-Based-On-MT7688-and-OpenWRT-p-2716.html"&gt;ReSpeaker&lt;/a&gt; （一個基於 MT7688 的聲控裝置開發板）遇到了個問題：在 ReSpeaker 中要如何使用 Python 播放 MP3 檔案？&lt;/p&gt;
&lt;p&gt;好在 ReSpeaker 上已有 &lt;em&gt;madplay …&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="foreword"&gt;
&lt;h2&gt;Foreword&lt;/h2&gt;
&lt;p&gt;這篇文章會稍微解釋 Unix 的 TTY 系統以及 Pseudo Terminal 的概念，接著討論如何使用 Python 的 &lt;tt class="docutils literal"&gt;pty&lt;/tt&gt; 模組中的 &lt;tt class="docutils literal"&gt;pty.fork()&lt;/tt&gt;
來建立並控制子行程的 TTY 系統，最後用 Python 來實作控制 &lt;em&gt;madplay&lt;/em&gt; 這個 CLI MP3 Player。&lt;/p&gt;
&lt;p&gt;有問題歡迎大家詢問，有任何錯誤也請大家幫忙指正 :D&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="python-mp3-player"&gt;
&lt;h2&gt;Python MP3 Player&lt;/h2&gt;
&lt;p&gt;這幾天在玩 &lt;a class="reference external" href="https://www.seeedstudio.com/ReSpeaker-Core-Based-On-MT7688-and-OpenWRT-p-2716.html"&gt;ReSpeaker&lt;/a&gt; （一個基於 MT7688 的聲控裝置開發板）遇到了個問題：在 ReSpeaker 中要如何使用 Python 播放 MP3 檔案？&lt;/p&gt;
&lt;p&gt;好在 ReSpeaker 上已有 &lt;em&gt;madplay&lt;/em&gt; 這個指令，能夠直接播放 MP3：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ madplay MP3_FILE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更讚的是只要加上 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--tty-control&lt;/span&gt;&lt;/tt&gt; 就能直接控制播放狀態！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ madplay MP3_FILE --tty-control MP3_FILE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如按下 &lt;tt class="docutils literal"&gt;p&lt;/tt&gt; 就能控制音樂播放的暫停 / 繼續。很好！這樣就可以用 &lt;tt class="docutils literal"&gt;subprocess&lt;/tt&gt; 模組啟動 madplay 來控制音樂播放啦！然後&lt;strong&gt;對這個子行程的 stdin&lt;/strong&gt; 寫入這些控制用的鍵應該就能控制音樂播放了吧？至少我是這樣想的…&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-mystery-tty"&gt;
&lt;h2&gt;The mystery TTY&lt;/h2&gt;
&lt;p&gt;俗話說的好，代誌往往不是憨人所想的那麼簡單，試了幾回後發現竟然沒效？！一氣之下翻了翻 madplay 的原始碼，發現 &lt;tt class="docutils literal"&gt;player.c&lt;/tt&gt;
裡有些跟 &lt;em&gt;TTY&lt;/em&gt; 這玩意兒有關的程式碼：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;# define TTY_DEVICE &amp;quot;/dev/tty&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;tty_fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TTY_DEVICE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tty_fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;玩過 Linux 的朋友們應該對 TTY 這個字有強烈的熟悉感，好像三不五時就會看到這東西出現。於是我拿他去 Google 後得到下面幾個結論：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;TTY 源自於 &lt;em&gt;Teletype&lt;/em&gt; 這個單字，中文稱為&lt;strong&gt;電傳打字機&lt;/strong&gt;，是古早年代用來遠距離傳遞文字資訊用的機器以及機制。&lt;/li&gt;
&lt;li&gt;很久很久以前並沒有 PC — Personal Computer 這種東西，有的只是一台螢幕加鍵盤組成的終端機，透過串列埠等等的傳輸方式與一台中央主機溝通，進行控制與運算的工作。Unix 下的 TTY 裝置概念就是從這裡出現的，細節可參考我列在最後面的 References。&lt;/li&gt;
&lt;li&gt;TTY 裝置架構中有一層叫做 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Line_discipline"&gt;Line discipline&lt;/a&gt; 。這東西介於軟體層（行程接收到的資訊）和驅動層（實際上與硬體打交道那一層）間，負責對從其中一層傳遞過來的資訊做前處理，再傳到另一層。舉例像是 Line editing（Buffering、Backspace、Echoing、移動游標等…）、字元轉換（ &lt;tt class="docutils literal"&gt;\n&lt;/tt&gt; 與 &lt;tt class="docutils literal"&gt;\r\n&lt;/tt&gt; 互相轉換…）、控制字元轉換為信號（ASCII 0x03→SIGINT）等等的功能。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/dev/tty&lt;/tt&gt; 裝置代表的是&lt;strong&gt;目前行程所連接著的終端（Terminal）裝置&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;從 &lt;tt class="docutils literal"&gt;player.c&lt;/tt&gt; 中的程式碼看起來，madplay 是直接從 /dev/tty 這個裝置讀取鍵盤輸入，而不是從 stdin 讀取。聽起來有點多此一舉，但這麼做有個好處：&lt;/p&gt;
&lt;blockquote&gt;
一個行程可以在從 stdin 接收資料的同時，接收來自鍵盤的訊息。&lt;/blockquote&gt;
&lt;p&gt;舉例來說， &lt;tt class="docutils literal"&gt;cat MP3_FILE | madplay &lt;span class="pre"&gt;-—tty-control&lt;/span&gt; -&lt;/tt&gt;
這串指令中的 madplay 會讀取 stdin，而 &lt;tt class="docutils literal"&gt;cat MP3_FILE&lt;/tt&gt; 這個指令會將 &lt;tt class="docutils literal"&gt;MP3_FILE&lt;/tt&gt;
這個檔案輸出到 stdout，中間我們藉由 &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; 來將這些資料導向至 madplay 進行播放。在這一連串事情發生的同時，使用者同樣可以用鍵盤控制播放狀態。&lt;/p&gt;
&lt;p&gt;既然如此，那有沒有辦法控制一個行程所連接著的終端裝置呢？更重要的是，Python 做的到嗎？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pseudo-terminal"&gt;
&lt;h2&gt;Pseudo Terminal&lt;/h2&gt;
&lt;p&gt;當然可以！針對控制一個行程的終端，Python 標準函式庫提供了
&lt;a class="reference external" href="https://docs.python.org/3/library/pty.html"&gt;pty&lt;/a&gt; 這個模組來處理與 &lt;em&gt;Pseudo Terminal&lt;/em&gt; 有關的概念。那什麼是 Pseudo Terminal？&lt;/p&gt;
&lt;p&gt;現在 PC 當道，基本上已經不存在過去那種「使用（不具運算能力的）終端連上一台電腦進行控制與運算」的情境。但是我們想把 TTY 這個概念延續到現在繼續用該怎麼辦？於是就出現了 Pseudo Terminal（注意：跟 Virtual Terminal 是不同的概念）。&lt;/p&gt;
&lt;p&gt;關於他的定義，我們直接來看一下
&lt;a class="reference external" href="https://linux.die.net/man/7/pty"&gt;pty 的 Linux man page&lt;/a&gt; ：&lt;/p&gt;
&lt;blockquote&gt;
A pseudoterminal (sometimes abbreviated “pty”) is a pair of virtual
character devices that provide a bidirectional communication channel.
One end of the channel is called the master; the other end is called the
slave. The slave end of the pseudoterminal provides an interface that
behaves exactly like a classical terminal. A process that expects to be
connected to a terminal, can open the slave end of a pseudoterminal and
then be driven by a program that has opened the master end. Anything that is
written on the master end is provided to the process on the slave end as
though it was input typed on a terminal.&lt;/blockquote&gt;
&lt;p&gt;Pseudo Terminal 建立了兩個虛擬字元裝置，分別稱為 master 與 slave，提供了一個雙向溝通的管道。讀寫 slave 端的的行程可以把該 slave 裝置完全當作是一個普通的 TTY 裝置軟體層，具有終端的行為模式。而另一個行程則能對 master 端進行讀寫，把 master 端當作是 TTY 裝置的硬體層。&lt;strong&gt;而其中對 master 或 slave 端寫入的資訊，同樣會經過 line discipline 的處理，再進到另一端。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;借 &lt;a class="reference external" href="http://www.linusakesson.net/programming/tty/"&gt;The TTY demystified&lt;/a&gt; 這篇文章中的圖來說明：&lt;/p&gt;
&lt;img alt="How xterm works" src="https://johnliu55.tw/use-python-to-control-other-process-tty/images/how-xterm-works.png" /&gt;
&lt;p&gt;換句話說，就是&lt;strong&gt;串列埠接頭變成了一個 file descriptor&lt;/strong&gt; 。於是呢，像 xterm 之類的終端模擬器（Terminal Emulator）就能夠以程式的方式去模擬一台古早年代終端機，將使用者使用終端機對串列埠寫入及讀取的行為模式，改為&lt;strong&gt;寫入及讀取這個 file descriptor&lt;/strong&gt; ，在同一台機器上模擬終端的輸入及輸出。&lt;/p&gt;
&lt;p&gt;大概了解了 Pseudo Terminal，接下來看看 Python 怎麼做這件事。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-pty-module"&gt;
&lt;h2&gt;The pty module&lt;/h2&gt;
&lt;p&gt;一句話解釋完 pty 模組：&lt;/p&gt;
&lt;blockquote&gt;
starting another process and being able to write to and read from its
controlling terminal programmatically.&lt;/blockquote&gt;
&lt;p&gt;Bingo，這聽起來就是我想要的啊！其中我們會需要用到 &lt;tt class="docutils literal"&gt;pty.fork&lt;/tt&gt; 這個函式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;tt class="docutils literal"&gt;pty.fork()&lt;/tt&gt; ：Fork 一個子行程，並讓該子行程的控制終端接上一個 Pseudo Terminal 的 slave 端。父行程會得到該 Pseudo Terminal 的 master 端，以一個 file descriptor 表示。這個函式的回傳值是個 tuple：(pid, fd)，子行程得到的 pid 會是 0，而父行程會得到一個非 0 的值，為子行程的 pid。&lt;/blockquote&gt;
&lt;p&gt;換句話說，我們可以啟動一個子行程，並使用父行程來控制該子行程的終端裝置，也就是 /dev/tty。在實做之前，先來測試一下 &lt;tt class="docutils literal"&gt;pty.fork()&lt;/tt&gt; ：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pty&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Child process&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SIGINT Received!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Parent wait for 1 sec then write 0x03...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Parent write 0x03&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x03&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Read until EOF or Input/Output Error&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Parent read from pty fd: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Parent wait for child process {!r} to exit...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitpid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Parent exit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;執行以上程式碼後應該會出現以下結果 (Ubuntu 16.04 with Python 3.5)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3.5 pty_fork_test.py
Parent &lt;span class="nb"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; sec &lt;span class="k"&gt;then&lt;/span&gt; write 0x03...
Parent write 0x03
Parent &lt;span class="nb"&gt;read&lt;/span&gt; from pty fd: b&lt;span class="s1"&gt;&amp;#39;Hello World!\r\n^CSIGINT Received!\r\n&amp;#39;&lt;/span&gt;
Parent &lt;span class="nb"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; child process &lt;span class="m"&gt;17676&lt;/span&gt; to exit...
Parent &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這段程式碼展示了父行程如何使用 &lt;tt class="docutils literal"&gt;pty.fork()&lt;/tt&gt;
回傳的 file descriptor 與子行程溝通的過程：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;子行程的 stdout 連接到 slave 端，因此子行程對 stdout 寫入的內容可以被父行程透過讀取 master 端，也就是 &lt;tt class="docutils literal"&gt;pty.fork()&lt;/tt&gt; 回傳的 file descriptor，來接收。因此，父行程能夠讀取到子行程對 stdout 寫入的 &lt;tt class="docutils literal"&gt;Hello &lt;span class="pre"&gt;World!\n&lt;/span&gt;&lt;/tt&gt; 字串。&lt;/li&gt;
&lt;li&gt;子行程寫入的 &lt;tt class="docutils literal"&gt;Hello World\n&lt;/tt&gt; 到了父行程變成了 &lt;tt class="docutils literal"&gt;Hello World\r\n&lt;/tt&gt; ，多了一個 &lt;em&gt;Carriage Return&lt;/em&gt; &lt;tt class="docutils literal"&gt;\r&lt;/tt&gt; 字元，這是 Line discipline 正在作用的結果。這證明了中間並不是只有單純的資料交換，而是 Linux 的 TTY 系統在作動中。&lt;/li&gt;
&lt;li&gt;父行程對 file descriptor 寫入數值 &lt;tt class="docutils literal"&gt;0x03&lt;/tt&gt; 後，到了子行程變成了 SIGINT 信號而被 Python 捕捉為 &lt;tt class="docutils literal"&gt;KeyboardInterrupt&lt;/tt&gt; 例外，接著子行程對 stdout 寫入 &lt;tt class="docutils literal"&gt;SIGINT &lt;span class="pre"&gt;Received!\n&lt;/span&gt;&lt;/tt&gt; 字串，然後被父行程讀取並顯示為 &lt;tt class="docutils literal"&gt;^CSIGINT &lt;span class="pre"&gt;Received!\r\n&lt;/span&gt;&lt;/tt&gt; 。這也證明了 Line discipline 以及 TTY 系統的作用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上是對 &lt;tt class="docutils literal"&gt;pty.fork()&lt;/tt&gt; 做的簡單測試。接下來來實做啦！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-mp3-player-powered-by-madplay"&gt;
&lt;h2&gt;The MP3 player powered by madplay&lt;/h2&gt;
&lt;p&gt;針對「使用 Python + madplay 控制 MP3 檔案的播放」這件事，可以這樣做：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;使用 &lt;tt class="docutils literal"&gt;pty.fork()&lt;/tt&gt; Fork 出一個子行程，讓該子行程使用 Python 的 &lt;tt class="docutils literal"&gt;os.exec*&lt;/tt&gt;
系列函式來啟動 madplay 取代目前行程，並播放一個 MP3 檔案。&lt;/li&gt;
&lt;li&gt;父行程利用 &lt;tt class="docutils literal"&gt;pty.fork()&lt;/tt&gt; 取得的 file descriptor 來控制子行程的終端裝置，進而控制 madplay。&lt;/li&gt;
&lt;li&gt;沒事得清清 file descriptor 的 receive buffer，避免讓子行程持續寫入而塞爆 buffer（這是我自己想的，實際上可能不用，但買個保險嘛）。&lt;/li&gt;
&lt;li&gt;子行程的 madplay 播放完畢後必須通知父行程，這時父行程必須使用 &lt;tt class="docutils literal"&gt;os.wait&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;os.waitpid&lt;/tt&gt; 來收拾子行程，否則會產生彊屍行程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不囉嗦，直接上 code：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;select&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pty&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Base error&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReadTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Polling timeout&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlayerState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;The state of the player&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;PLAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;play&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;PAUSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pause&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;STOP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;stop&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mp3FilePlayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PlayerState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STOP&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_tty_fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_start_play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This method forks a child process and start exec &amp;#39;madplay&amp;#39; to play&lt;/span&gt;
&lt;span class="sd"&gt;            the mp3 file. Since &amp;#39;madplay&amp;#39; can ONLY be controlled by tty, we have&lt;/span&gt;
&lt;span class="sd"&gt;            to use pty.fork and use the return fd in the parent process (which&lt;/span&gt;
&lt;span class="sd"&gt;            connects the child&amp;#39;s controlling terminal) to control the playback.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# Register SIGCHLD to get notified when the child process terminated&lt;/span&gt;
        &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGCHLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sigchld_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Child process. Exec madplay&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/bin/madplay&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--tty-control&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Parent process&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_tty_fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Forked child TTY fd: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_tty_fd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Forked child PID: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_clear_tty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_read_tty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Read the TTY fd by n bytes or raise ReadTimeout if reached specified timeout.&lt;/span&gt;
&lt;span class="sd"&gt;            The timeout value is in milliseconds.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_tty_fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POLLIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_tty_fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Immediately after the polling&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ReadTimeout&lt;/span&gt;

        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Number of polled events != 1&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POLLIN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Unexpected polled event: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_tty_fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_clear_tty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Clearing the TTY fd. Preventing the receiving buffer to overflow.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Keep reading until timeout, which means nothing more to read.&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_read_tty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ReadTimeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_sigchld_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Handler function of SIGCHLD&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SIGCHLD signal received.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Start the playback or resume from pausing&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player_state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;PlayerState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STOP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_start_play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PlayerState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PLAY&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player_state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;PlayerState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PAUSE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_tty_fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_clear_tty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PlayerState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PLAY&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Pause the playback&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player_state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;PlayerState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PLAY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_tty_fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_clear_tty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PlayerState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PAUSE&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Stop the playback. This will stop the child process.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player_state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;PlayerState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STOP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Unregister the signal (set to SIG_DFL) to prevent recusively calling stop()&lt;/span&gt;
            &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGCHLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIG_DFL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Kill pid {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Wait pid {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitpid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Child process {} died.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PlayerState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STOP&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;這段程式碼定義了類別 &lt;tt class="docutils literal"&gt;Mp3FilePlayer&lt;/tt&gt; 來控制播放。以下是幾個重點：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Mp3FilePlayer&lt;/tt&gt; 定義了 &lt;tt class="docutils literal"&gt;play&lt;/tt&gt; ， &lt;tt class="docutils literal"&gt;pause&lt;/tt&gt; 及 &lt;tt class="docutils literal"&gt;stop&lt;/tt&gt;
這三個方法來控制 MP3 檔案的播放、暫停及停止。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;stop&lt;/tt&gt; 方法會藉由送出 SIGTERM 信號來停掉子行程，並使用 &lt;tt class="docutils literal"&gt;waitpid()&lt;/tt&gt;
來收拾善後。&lt;/li&gt;
&lt;li&gt;使用 &lt;tt class="docutils literal"&gt;select.poll()&lt;/tt&gt; ，而非直接使用 &lt;tt class="docutils literal"&gt;os.read()&lt;/tt&gt;
直接讀取 file descriptor。原因是我需要對讀取這件事設定 timeout，而 &lt;tt class="docutils literal"&gt;os.read()&lt;/tt&gt; 這個函式無法做到。&lt;/li&gt;
&lt;li&gt;設定 &lt;tt class="docutils literal"&gt;Mp3FilePlayer._sigchld_handler&lt;/tt&gt; 方法當 SIGCHLD 信號的處理函式，以便在 madplay 播放完 MP3 檔後，讓父行程呼叫 &lt;tt class="docutils literal"&gt;stop&lt;/tt&gt; 方法來收拾子行程，避免產生彊屍行程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Mp3FilePlayer&lt;/tt&gt; 可以這樣使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mp3_player&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mp3FilePlayer&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mp3FilePlayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/tmp/test.mp3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# The music should be started. The play method return immediately.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# The music should be paused now. The pause method also return&lt;/span&gt;
&lt;span class="c1"&gt;# immediately.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# The playback should be resumed from where it was paused.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# The music should be stopped now.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# The music should be started from the beginning.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;經過這幾天的研究總算稍微理解了 TTY 這東西，也理解了如何使用 Python 的 pty 模組來控制其他行程的終端。希望這篇文能幫助大家🎉&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.linusakesson.net/programming/tty/"&gt;The TTY demystified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://unix.stackexchange.com/q/117981"&gt;What are the responsibilities of each Pseudo-Terminal (PTY) component
(software, master side, slave side)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://olvaffe.blogspot.tw/2009/01/console-io.html"&gt;一千零一夜之 Console I/O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://zwai.pixnet.net/blog/post/24326951-linux-tty-driver---linux-tty-%E9%A9%85%E5%8B%95%E7%A8%8B%E5%BC%8F"&gt;Linux TTY Driver — Linux TTY 驅動程式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://utcc.utoronto.ca/~cks/space/blog/unix/TypingEOFEffects"&gt;What typing ^D really does on Unix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.wowotech.net/tty_framework/tty_concept.html"&gt;Linux TTY framework(1)_ 基本概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.wowotech.net/tty_framework/application_view.html"&gt;Linux TTY framework(3)_ 从应用的角度看 TTY 设备&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="TTY"></category><category term="Linux"></category></entry></feed>