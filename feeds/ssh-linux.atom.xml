<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>John Engineering Stuff - SSH, Linux</title><link href="https://johnliu55.tw/" rel="alternate"></link><link href="https://johnliu55.tw/feeds/ssh-linux.atom.xml" rel="self"></link><id>https://johnliu55.tw/</id><updated>2020-05-21T00:00:00+08:00</updated><entry><title>SSH Tunneling (Port Forwarding) 詳解</title><link href="https://johnliu55.tw/ssh-tunnel.html" rel="alternate"></link><published>2020-05-21T00:00:00+08:00</published><updated>2020-05-21T00:00:00+08:00</updated><author><name>John Liu</name></author><id>tag:johnliu55.tw,2020-05-21:/ssh-tunnel.html</id><summary type="html">&lt;p class="first last"&gt;詳細解釋使用SSH的Local Port Forwarding、Remote Port Forwarding、
和Dynamic Port Forwarding來建立加密通道（Tunneling）的方法。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;前陣子因為疫情的關係開始 WFH，順勢就研究起了用 SSH 建立加密連線通道的方式，然後才發現他超級強大，但實在有點難理解怎麼下指令，於是就把細節記錄下來，之後可以拿來參考一下。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;什麼是 SSH Tunneling (Port Forwarding)？&lt;/h2&gt;
&lt;p&gt;Tunneling 通常指的是將網路上的 A、B 兩個端點，用某種方式連接起來形成一個隧道，讓 A、B 兩端的通訊能夠穿透某些限制（例如防火牆），或是能將通訊內容加密避免洩漏。而 SSH Tunneling 指的就是利用 SSH 協定建立這個隧道，所以不但能加密你的通訊，如果 A、B 之間設有防火牆擋掉某些特定 Port 的連線（例如 HTTP/HTTPS 的 80/443），SSH Tunneling 也會讓防火牆認為這只是一般的 SSH 連線，進而達到「穿透防火牆」的效果。&lt;/p&gt;
&lt;p&gt;另外，因為 SSH Tunneling 的目標是兩個端點上的 Port，而且通訊過程就像是把對 A 點上的某個 Port X 所傳送的資料&lt;strong&gt;轉送&lt;/strong&gt;
（Forward）至 B 點上的 Port Y，所以 SSH Tunneling 又稱為 &lt;strong&gt;SSH Port Forwarding&lt;/strong&gt; 。&lt;/p&gt;
&lt;img alt="Tunneling 示意圖 " src="https://johnliu55.tw/ssh-tunnel/images/tunneling.png" /&gt;
&lt;p&gt;SSH Port Forwarding 有下列三種模式：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Local Port Forwarding&lt;/li&gt;
&lt;li&gt;Remote Port Forwarding&lt;/li&gt;
&lt;li&gt;Dynamic Port Forwarding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下來會一一說明各種模式。先來看看在 SSH Port Forwarding 當中參與的角色有哪些。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="port-fowarding"&gt;
&lt;h2&gt;Port Fowarding 裡的角色定義&lt;/h2&gt;
&lt;p&gt;對 Local 和 Remote Port Forwarding 來說，都會有下面這三個角色：&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Client&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;任何你可以敲 &lt;tt class="docutils literal"&gt;ssh&lt;/tt&gt; 指令來啟動 Port Forwarding 的機器&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;SSH Server&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;可以被 &lt;strong&gt;Client&lt;/strong&gt; 用 SSH 連進去的機器&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Target Server&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;某一台你想建立連線的機器，通常是為了對外開放這台機器上的服務&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;， &lt;strong&gt;Client&lt;/strong&gt; 與 &lt;strong&gt;SSH Server&lt;/strong&gt; 本身都可以是 &lt;strong&gt;Target Server&lt;/strong&gt; ，不是真的要有三台機器才可以進行 Port Forwarding！&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;而 Dynamic Port Forwarding 比較不一樣，在於 Target Server 不會只有一台，而是可以被動態決定的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="local-port-forwarding"&gt;
&lt;h2&gt;Local Port Forwarding&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;指令語法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L [bind_address:]&amp;lt;port&amp;gt;:&amp;lt;host&amp;gt;:&amp;lt;host_port&amp;gt; &amp;lt;SSH Server&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 &lt;strong&gt;Client&lt;/strong&gt; 上開啟 &lt;tt class="docutils literal"&gt;bind_address:port&lt;/tt&gt; 等待連線，當有人連上時，將所有資料轉送到 &lt;tt class="docutils literal"&gt;host:host_port&lt;/tt&gt; 去。
&lt;strong&gt;注意&lt;/strong&gt;， &lt;tt class="docutils literal"&gt;host&lt;/tt&gt; 是相對於 &lt;strong&gt;SSH Server&lt;/strong&gt; 的位址，而不是 &lt;strong&gt;Client&lt;/strong&gt; ！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;使用情境一：連到位在防火牆後的開發伺服器上的服務&lt;/h3&gt;
&lt;p&gt;你有一台位於防火牆後的開發伺服器， 你在上面架了某個服務在 Port 8080 上，但防火牆只開放 Port 22 的 SSH 連線，讓你無法從你的電腦直接連到 Port 8080，但你又很想連到他…&lt;/p&gt;
&lt;img alt=" 情境 1 示意圖 " src="https://johnliu55.tw/ssh-tunnel/images/local_scenario1_problem.png" /&gt;
&lt;p&gt;這時候只要你能夠 SSH 到那台伺服器，就可以利用 Local Port Forwarding 來開啟你電腦上的某個 Port（假設為 9090），將對它發送的資料轉送到伺服器的 Port 8080。這樣一來， 連上你的電腦的 Port 9090 就等於連上了防火牆後的伺服器的 Port 8080 ，也就繞過了防火牆的限制。&lt;/p&gt;
&lt;img alt=" 情境 1 解法示意圖 " src="https://johnliu55.tw/ssh-tunnel/images/local_scenario1_solved.png" /&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Client&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;你的電腦&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;SSH Server&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;防火牆後的伺服器&lt;/li&gt;
&lt;li&gt;SSH Destination： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;johnliu&amp;#64;my-server&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Target Server&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;防火牆後的伺服器&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;SSH 指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L 9090:localhost:8080 johnliu@my-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這邊的 &lt;tt class="docutils literal"&gt;localhost&lt;/tt&gt; 是相對於 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;johnliu&amp;#64;my-server&lt;/span&gt;&lt;/tt&gt; ，指的就是防火牆後的伺服器本身。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;註釋&lt;/p&gt;
&lt;ul class="last"&gt;
&lt;li&gt;&lt;p class="first"&gt;你完全可以在你的電腦上用相同的 Port number 來做 Port Forwarding，這邊用 &lt;tt class="docutils literal"&gt;9090&lt;/tt&gt; 只是為了避免混淆：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L 8080:localhost:8080 johnliu@my-server
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;如果你沒有給 &lt;tt class="docutils literal"&gt;bind_address&lt;/tt&gt; ，預設會 Bind 在 &lt;tt class="docutils literal"&gt;localhost&lt;/tt&gt; 上。如果你想把 Port &lt;tt class="docutils literal"&gt;9090&lt;/tt&gt; 開放給所有人用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L 0.0.0.0:9090:localhost:8080 johnliu@my-server
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;使用情境二：透過防火牆後的機器，連到防火牆後的特定服務&lt;/h3&gt;
&lt;p&gt;情境一有用的前提是&lt;strong&gt;你能夠 SSH 到提供服務的伺服器裡&lt;/strong&gt;，但今天如果你沒有權限，無法 SSH 進到提供服務的伺服器，那該怎麼辦呢？&lt;/p&gt;
&lt;img alt=" 情境 1 示意圖 " src="https://johnliu55.tw/ssh-tunnel/images/local_scenario2_problem.png" /&gt;
&lt;p&gt;沒問題！只要你在防火牆後有任何一台你可以 SSH 的機器，接著修改一下指令裡的 &lt;tt class="docutils literal"&gt;host&lt;/tt&gt; 設定，你就可以利用這台機器進行資料轉送：&lt;/p&gt;
&lt;img alt=" 情境 1 解法示意圖 " src="https://johnliu55.tw/ssh-tunnel/images/local_scenario2_solved.png" /&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Client&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;你的電腦&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;SSH Server&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;防火牆後你的機器&lt;/li&gt;
&lt;li&gt;SSH Destination： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;johnliu&amp;#64;my-server&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Target Server&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;防火牆後的伺服器&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;192.168.1.101:8080&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;SSH 指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L 9090:192.168.1.101:8080 johnliu@my-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這邊的 &lt;tt class="docutils literal"&gt;192.168.1.101&lt;/tt&gt; 是相對於 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;johnliu&amp;#64;my-server&lt;/span&gt;&lt;/tt&gt; ，所以是防火牆後的伺服器的 IP 位址。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="remote-port-forwarding"&gt;
&lt;h2&gt;Remote Port Forwarding&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;指令語法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -R [bind_address:]&amp;lt;port&amp;gt;:&amp;lt;host&amp;gt;:&amp;lt;host_port&amp;gt; &amp;lt;SSH Server&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 &lt;strong&gt;SSH Server&lt;/strong&gt; 上開啟 &lt;tt class="docutils literal"&gt;bind_address:port&lt;/tt&gt; 等待連線，當有人連上時，將所有資料轉送到 &lt;tt class="docutils literal"&gt;host:host_port&lt;/tt&gt; 去。
&lt;strong&gt;注意&lt;/strong&gt;， &lt;tt class="docutils literal"&gt;host&lt;/tt&gt; 是相對於 &lt;strong&gt;Client&lt;/strong&gt; 的位址，而不是 &lt;strong&gt;SSH Server&lt;/strong&gt; ！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;使用情境一：透過對外機器，讓其他人能夠連到你的電腦上的服務&lt;/h3&gt;
&lt;p&gt;你在你的電腦上開發完了一個服務架在 Port 8080 上，然後你想要 Demo 給客戶看，但你的電腦只有內部 IP，所以無法讓客戶連進來：&lt;/p&gt;
&lt;img alt="Remote 情境 1 示意圖 " src="https://johnliu55.tw/ssh-tunnel/images/remote_scenario1_problem.png" /&gt;
&lt;p&gt;這時候只要利用 SSH Remote Forwarding，就可以藉由一台有 Internet IP 的對外機器，開啟上面的某個 Port（假設為 9090）來轉送資料到你的電腦上的 Port 8080。這樣子，客戶只要連上對外機器的 Port 9090 就等於是連上了你電腦的 Port 8080。&lt;/p&gt;
&lt;img alt="Remote 情境 1 解法示意圖 " src="https://johnliu55.tw/ssh-tunnel/images/remote_scenario1_solved.png" /&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Client&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;你的電腦&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;SSH Server&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;對外機器&lt;/li&gt;
&lt;li&gt;SSH Destination： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;johnliu&amp;#64;external-server&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Target Server&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;你的電腦&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;SSH 指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -R 0.0.0.0:9090:localhost:8080 johnliu@external-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這邊的 &lt;tt class="docutils literal"&gt;localhost&lt;/tt&gt; 是相對於 &lt;strong&gt;Client&lt;/strong&gt;  ，指的就是你的電腦本身。&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;警告&lt;/p&gt;
&lt;p&gt;基於安全考量，
&lt;strong&gt;Remote Forwarding 預設都只能夠 bind 在 SSH Server 的 localhost 上&lt;/strong&gt;，所以單靠以上指令是無法讓 Port 9090 開放給外部連線的。你必須調整 SSH Server 上的 SSH 服務的設定檔（一般在 &lt;tt class="docutils literal"&gt;/etc/ssh/sshd_config&lt;/tt&gt; ）加入 &lt;tt class="docutils literal"&gt;GatewayPorts&lt;/tt&gt; 設定，才能讓所有人都連到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GatewayPorts yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p class="last"&gt;這邊有三個選項：預設為 &lt;tt class="docutils literal"&gt;no&lt;/tt&gt; ，也就是唯一指定 localhost；設定為 &lt;tt class="docutils literal"&gt;yes&lt;/tt&gt; 可以唯一指定為 wildcard（ &lt;tt class="docutils literal"&gt;0.0.0.0&lt;/tt&gt; ）；設定為 &lt;tt class="docutils literal"&gt;clientspecified&lt;/tt&gt; 可以讓啟動 Remote Forwarding 的 Client 自行指定。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;使用情境二：透過對外機器，從外面連回內部網路上的服務&lt;/h3&gt;
&lt;p&gt;有一個在內網裡的內部服務，你的電腦可以用 IP &lt;tt class="docutils literal"&gt;192.168.1.100&lt;/tt&gt;
和 Port 8080 連到這個服務，但因為都在內網所以大家都沒有 Internet IP，所以無法讓你從家裡透過 Internet 連回來：&lt;/p&gt;
&lt;img alt="Remote 情境 2 示意圖 " src="https://johnliu55.tw/ssh-tunnel/images/remote_scenario2_problem.png" /&gt;
&lt;p&gt;這時候藉由 Remote Forwarding 和一台對外機器， 可以讓你從任何地方連回這個服務：&lt;/p&gt;
&lt;img alt="Remote 情境 2 解法示意圖 " src="https://johnliu55.tw/ssh-tunnel/images/remote_scenario2_solved.png" /&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Client&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;你的電腦&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;SSH Server&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;對外機器&lt;/li&gt;
&lt;li&gt;SSH Destination： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;johnliu&amp;#64;external-server&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Target Server&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;內部服務&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;192.168.1.100:8080&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;SSH 指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -R 0.0.0.0:9090:192.168.1.100:8080 johnliu@external-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在這裡， &lt;tt class="docutils literal"&gt;192.168.1.100&lt;/tt&gt; 是相對於你的電腦，所以就算外部機器連不到這個位址也沒關係，因為是透過你的電腦做資料轉送。這樣子，只要連到對外機器上的 Port 9090 就等於是連到內部服務上的 Port 8080 了，你就能夠從外部存取內網服務。&lt;/p&gt;
&lt;p&gt;這應該是 SSH Port Forwarding 最強大的功能了！只要在網路上租一台最便宜的主機（Linode, Digital Ocean 之類的），就可以拿他來當圖示中的對外機器，來連回內部網路上的服務。不過前提是你得在有內網連線時將 Port Forwarding 設定好，如果你到家後才想到，那就請你再跑一趟吧…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-port-forwarding"&gt;
&lt;h2&gt;Dynamic Port Forwarding&lt;/h2&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;指令語法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -D [bind_address:]&amp;lt;port&amp;gt; &amp;lt;SSH Server&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 SSH Server 上啟動一個 &lt;a class="reference external" href="https://zh.wikipedia.org/wiki/SOCKS"&gt;SOCKS&lt;/a&gt; 代理伺服器，同時在 &lt;strong&gt;Client&lt;/strong&gt; 上開啟 &lt;tt class="docutils literal"&gt;bind_address:port&lt;/tt&gt; 等待連線，當有人連上時，將所有資料轉送到這個 SOCKS 代理伺服器上，啟動相對應的連線請求。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="httphttp-s"&gt;
&lt;h3&gt;使用情境：建立一個 HTTP 代理伺服器連到內網的所有 HTTP(S) 服務&lt;/h3&gt;
&lt;p&gt;只要有一台位於內網且&lt;strong&gt;具有外部 IP&lt;/strong&gt; 的機器，你就可以利用這個方法建立一個 HTTP 代理伺服器，讓你能夠從外面連回內網裡的所有 HTTP(S) 服務：&lt;/p&gt;
&lt;img alt="Dynamic 情境示意圖 " src="https://johnliu55.tw/ssh-tunnel/images/dynamic.png" /&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Client&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;你的電腦&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;SSH Server&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;內網裡具有外部 IP 的機器&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Target Server&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;N/A&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;SSH 指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -D 9090 johnliu@internal-machine
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假設你是用 Linux 和 Chrome，你可以在你的電腦上用以下指令讓 Chrome 使用這個代理伺服器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;google-chrome --user-data-dir=~/proxied-chrome --proxy-server=socks5://localhost:9090
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;註釋&lt;/p&gt;
&lt;ul class="last simple"&gt;
&lt;li&gt;這邊的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;google-chrome&lt;/span&gt;&lt;/tt&gt; 只是範例，不同的 Linux 發行版名字可能會不同&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--user-data-dir&lt;/span&gt;&lt;/tt&gt; 是為了讓 Chrome 能夠開啟一個新的 Chrome session，不加的話 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--proxy-server&lt;/span&gt;&lt;/tt&gt; 這個設定就沒用了&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;一般的 Port Forwarding 只能夠轉送&lt;strong&gt;一個 IP 上的一個 Port&lt;/strong&gt; ，當你有很多 IP 或很多 Port 想轉時就只能一個一個開， 很不方便。相比之下，Dynamic Port Forwarding 能直接架起一個代理伺服器，只要你用的程式有支援 SOCKS 協定，透過這個代理伺服器讓你想怎麼轉就怎麼轉。不過這方式也不是沒缺點，就是那台轉送用的機器一定得要有對外 IP，這樣才能夠從你的電腦連回來。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;從圖可以看出來，Local 跟 Remote Forwarding 的差異主要在 &lt;strong&gt;Port 開啟的地方&lt;/strong&gt;：Local Forwarding 是將 Client 上的 Port 打開以供連線；Remote Forwarding 則是將 SSH Server 上的 Port 打開。另外要注意的點是轉送的目的地 &lt;tt class="docutils literal"&gt;host&lt;/tt&gt; ：Local Forwarding 是相對於 SSH Server，而 Remote Forwarding 則是相對於 Client。&lt;/p&gt;
&lt;p&gt;雖然 Dynamic Port Forwarding 的彈性更大，但條件就是 SSH Server 就必須要能夠從外面連回來。不過其實也是有 Workaround 啦，搭配一下 Port Forwarding 就行了，但這樣的話你有更好的 Proxy 選擇，像是 &lt;a class="reference external" href="http://tinyproxy.github.io/"&gt;Tinyproxy&lt;/a&gt; 等等。&lt;/p&gt;
&lt;p&gt;就寫到這邊，有問題也歡迎大家討論唷！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zh.wikipedia.org/wiki/SOCKS"&gt;SOCKS (Wiki)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ssh.com/ssh/tunneling/example"&gt;SSH Port Forwarding Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="SSH, Linux"></category><category term="SSH"></category><category term="Linux"></category><category term="Tunneling"></category><category term="Port Forwarding"></category></entry></feed>